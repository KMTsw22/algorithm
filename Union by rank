#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

//부모노드를 찾는 함수
int getParent(int parent[], int x) {
    if (parent[x] == x)
        return x;
    return parent[x] = getParent(parent, parent[x]);
}
// 두 부모 노드를 합치는 함수
int Rank[11];
void unionParent(int parent[], int a, int b) {
    a = getParent(parent, a);
    b = getParent(parent, b);
    if (a ==b) return;
    //랭크가 낮은 쪽으로 옮겨 주기
    if (Rank[a] > Rank[b])
        swap(a, b);
    parent[a]= b;
    if (Rank[a] == Rank[b]) Rank[b]++;

}

int main(){
    int parent[11] = { 0 };
    for (int i = 1; i < 11; i++) {
        parent[i] = i;
        Rank[i]=1;
    }
    unionParent(parent, 1, 2);

    unionParent(parent, 2, 3);
    unionParent(parent, 3, 4);
    unionParent(parent, 4, 5);
    for (int i = 1;i < 11;i++){
        cout << i << " : " << parent[i] << endl;
    }
}
