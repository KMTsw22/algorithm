#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
typedef pair<int, pair<int, int>> p;

int v = 6;
int parent[7];
vector<pair<int, pair<int,int>>> edges;

int find_parent(int x){
    if (parent[x] == x) return x;
    return parent[x] = find_parent(parent[x]);
}
void union_parent(int x, int y){
    x = find_parent(x);
    y = find_parent(y);
    if (x > y) parent[x] = y;
    else parent[y]=x;
}
// [1[1, 2]] 이렇게 들어가는거임

vector<pair<int, pair<int ,int>>> kruskal(){
    vector<pair<int, pair<int,int>>> mst;
    for (int i =0; i < edges.size();i++){
        p cur_edges =edges[i];
        //현재 간선이 잇는 두정점
        int f = cur_edges.second.first;
        int s = cur_edges.second.second;
        if (find_parent(f) == find_parent(s)) continue;

        mst.push_back(cur_edges);
        union_parent(f,s);
        if (mst.size() == v-1)  return mst;
    }
}
void init() {
    edges.push_back({ 1, {1, 5} });
    edges.push_back({ 4, {1, 3} });
    edges.push_back({ 3, {1, 4} });
    edges.push_back({ 9, {1, 2} });

    edges.push_back({ 4, {2, 4} });
    edges.push_back({ 5, {2, 5} });

    edges.push_back({ 6, {3, 6} });

    edges.push_back({ 2, {4, 5} });
    edges.push_back({ 8, {4, 6} });

    //간선들을 가중치 기준 오름차순 정렬
    sort(edges.begin(), edges.end());

    //Union-Find Setting
    for (int i = 1; i <= 6; i++) parent[i] = i;
}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(NULL);

    init();
    vector<p> mst = kruskal();

    printf("[MST]\n");
    for (int i = 0; i < mst.size(); i++) {
        printf("%d - %d : 비용 %d\n", mst[i].second.first, mst[i].second.second, mst[i].first);
    }

    return 0;
}
